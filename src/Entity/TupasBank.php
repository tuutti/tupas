<?php

namespace Drupal\tupas\Entity;

use Drupal\Core\Config\Entity\ConfigEntityBase;
use Drupal\Core\Site\Settings;
use Tupas\Exception\TupasGenericException;

/**
 * Defines the Tupas bank entity.
 *
 * @ConfigEntityType(
 *   id = "tupas_bank",
 *   label = @Translation("Tupas bank"),
 *   handlers = {
 *     "storage" = "Drupal\tupas\TupasBankStorage",
 *     "list_builder" = "Drupal\tupas\TupasBankListBuilder",
 *     "form" = {
 *       "add" = "Drupal\tupas\Form\TupasBankForm",
 *       "edit" = "Drupal\tupas\Form\TupasBankForm",
 *       "delete" = "Drupal\tupas\Form\TupasBankDeleteForm"
 *     },
 *     "route_provider" = {
 *       "html" = "Drupal\tupas\TupasBankHtmlRouteProvider",
 *     },
 *   },
 *   config_prefix = "tupas_bank",
 *   admin_permission = "administer tupas",
 *   entity_keys = {
 *     "id" = "id",
 *     "label" = "label",
 *     "uuid" = "uuid"
 *   },
 *   links = {
 *     "canonical" = "/admin/config/people/tupas/banks/{tupas_bank}",
 *     "add-form" = "/admin/config/people/tupas/banks/add",
 *     "edit-form" = "/admin/config/people/tupas/banks/{tupas_bank}/edit",
 *     "delete-form" = "/admin/config/people/tupas/banks/{tupas_bank}/delete",
 *     "collection" = "/admin/config/people/tupas/banks"
 *   }
 * )
 */
class TupasBank extends ConfigEntityBase implements TupasBankInterface {

  /**
   * Array of tupas settings.
   *
   * @var array
   */
  protected $settings;

  /**
   * The Tupas bank ID.
   *
   * @var string
   */
  protected $id;

  /**
   * The Tupas bank label.
   *
   * @var string
   */
  protected $label;

  /**
   * The Tupas bank status.
   *
   * @var bool
   */
  protected $status;

  /**
   * The tupas bank form action URL.
   *
   * @var string
   */
  protected $action_url;

  /**
   * The tupas bank certification version.
   *
   * @var int
   */
  protected $cert_version;

  /**
   * Receiver id.
   *
   * @var string
   */
  protected $rcv_id;

  /**
   * Receiver key.
   *
   * @var string
   */
  protected $rcv_key;

  /**
   * Key version.
   *
   * @var string
   */
  protected $key_version;

  /**
   * Encryption algorithm.
   *
   * @var string
   */
  protected $encryption_alg;

  /**
   * The Tupas bank id type.
   *
   * @var string
   */
  protected $id_type;

  /**
   * The Tupas bank number.
   *
   * @var integer
   */
  protected $bank_number;

  /**
   * {@inheritdoc}
   */
  public function getActionId() {
    return 701;
  }

  /**
   * {@inheritdoc}
   */
  public function getStatus() {
    return (bool) $this->get('status');
  }

  /**
   * {@inheritdoc}
   */
  public function getActionUrl() {
    return $this->get('action_url');
  }

  /**
   * {@inheritdoc}
   */
  public function getCertVersion() {
    return $this->get('cert_version');
  }

  /**
   * {@inheritdoc}
   */
  public function getReceiverId() {
    return $this->get('rcv_id');
  }

  /**
   * {@inheritdoc}
   */
  public function getReceiverKey() {
    return $this->get('rcv_key');
  }

  /**
   * {@inheritdoc}
   */
  public function getKeyVersion() {
    return $this->get('key_version');
  }

  /**
   * {@inheritdoc}
   */
  public function getAlgorithm() {
    return $this->get('encryption_alg');
  }

  /**
   * {@inheritdoc}
   */
  public function getIdType() {
    return $this->get('id_type');
  }

  /**
   * {@inheritdoc}
   */
  public function getBankNumber() {
    return (int) $this->get('bank_number');
  }

  /**
   * {@inheritdoc}
   */
  public static function getHashableTypes() {
    $types = ['02', '12', '22', '32', '42'];

    // Create identical key for the value.
    return array_combine($types, $types);
  }

  /**
   * {@inheritdoc}
   */
  public function validIdType() {
    $hashable_types = static::getHashableTypes();

    if (!isset($hashable_types[$this->getIdType()])) {
      return FALSE;
    }
    return TRUE;
  }

  /**
   * Hash customer id.
   *
   * Hashing logic is copied directly from tupas_registration 7.x-1.x.
   *
   * @param string $payload
   *   The value SSN to be hashed that must contain sign
   *   of century (-, +, or A).
   *
   * @return string
   *   Hashed payload.
   *
   * @throws \Tupas\Exception\TupasGenericException
   */
  public function hashResponseId($payload) {
    // Response is already hashed. Nothing to do.
    // @note Hash generated by bank cannot be used with tupas_registration because
    // hash contains timestamp, thus making it unique for every request.
    if (!$this->validIdType()) {
      return $payload;
    }
    $pieces = preg_split("/(\+|\-|A)/", $payload);
    if (empty($pieces[1])) {
      throw new TupasGenericException('SSN must contain sign of century.');
    }
    $hashing_algorithm = '$2a$';
    $log2_level = 13;

    // Create salt specific for the SSN.
    $salt = hash_hmac('sha512', Settings::getHashSalt(), $pieces[0]);

    // SSN hashed with a salt generated from the site specific salt and the
    // birthdate.
    $hashed_ssn = crypt($payload, $hashing_algorithm . $log2_level . '$' . $salt . '$');

    return $hashed_ssn;
  }

  /**
   * Legacy hash SSN.
   *
   * @param string $payload
   *   The SSN to be hashed.
   *
   * @return string
   *   Hashed payload.
   */
  public function legacyHash($payload) {
    $hashed_password = hash('sha512', Settings::getHashSalt() . $payload);

    return $hashed_password;
  }

}
